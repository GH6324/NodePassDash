// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../public/sqlite.db"
}

// 端点状态枚举
enum EndpointStatus {
  ONLINE
  OFFLINE
  FAIL
}

// SSE 事件类型枚举
enum SSEEventType {
  initial    // 连接建立时发送，包含所有实例的当前状态
  create     // 创建新实例时发送
  update     // 实例更新时发送（状态变更、启动/停止操作）
  delete     // 实例被删除时发送
  shutdown   // 主控服务即将关闭时发送
  log        // 实例产生新日志内容时发送
}

// 隧道状态枚举
enum TunnelStatus {
  running
  stopped
  error
}

// 隧道模式枚举
enum TunnelMode {
  server
  client
}

// TLS 模式枚举
enum TLSMode {
  inherit
  mode0
  mode1
  mode2
}

// 日志级别枚举
enum LogLevel {
  inherit
  debug
  info
  warn
  error
  fatal
}

// 端点表
model Endpoint {
  id              Int               @id @default(autoincrement())
  name            String            @unique
  url             String            @unique
  apiPath         String
  apiKey          String
  status          EndpointStatus    @default(OFFLINE)
  lastCheck       DateTime          @default(now())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  color           String?           @default("default")
  tunnelCount     Int               @default(0)
  tunnels         Tunnel[]
  sseData         EndpointSSE[]

  @@index([status])
  @@index([createdAt])
}

// 隧道表（原 TunnelInstance）
model Tunnel {
  id            Int          @id @default(autoincrement())
  name          String       @unique
  endpointId    Int
  mode          TunnelMode
  status        TunnelStatus @default(stopped)
  tunnelAddress String
  tunnelPort    String
  targetAddress String
  targetPort    String
  tlsMode       TLSMode
  certPath      String?
  keyPath       String?
  logLevel      LogLevel     @default(info)
  commandLine   String
  instanceId    String?      // 改名：原 tunnelInstanceId
  
  // 网络流量统计字段
  tcpRx         BigInt?      @default(0) // TCP接收字节数
  tcpTx         BigInt?      @default(0) // TCP发送字节数
  udpRx         BigInt?      @default(0) // UDP接收字节数
  udpTx         BigInt?      @default(0) // UDP发送字节数
  
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  lastEventTime DateTime?    // 添加事件时间字段，用于确保按正确顺序处理更新
  endpoint      Endpoint     @relation(fields: [endpointId], references: [id], onDelete: Cascade)

  @@unique([endpointId, instanceId])
  @@index([status])
  @@index([createdAt])
  @@index([lastEventTime])
}

// 操作日志表
model TunnelOperationLog {
  id          Int       @id @default(autoincrement())
  tunnelId    Int?
  tunnelName  String
  action      String
  status      String
  message     String?
  createdAt   DateTime  @default(now())

  @@index([tunnelId])
  @@index([createdAt])
}

// SSE 推送数据平铺表（原 ResponseSSE）
model EndpointSSE {
  id          Int          @id @default(autoincrement())
  // SSE 事件基本信息
  eventType   SSEEventType // log, create, update, delete, etc.
  pushType    String       // 推送的原始type字段 (initial, create, update, delete, shutdown, log)
  eventTime   DateTime     // SSE推送的时间
  endpointId  Int          // 端点ID
  
  // 实例信息
  instanceId  String       // 实例ID
  instanceType String?     // 实例类型 (server/client)
  status      String?      // 实例状态 (running/stopped/error)
  url         String?      // 实例URL
  
  // 网络统计
  tcpRx       BigInt?      @default(0) // TCP接收字节数
  tcpTx       BigInt?      @default(0) // TCP发送字节数
  udpRx       BigInt?      @default(0) // UDP接收字节数
  udpTx       BigInt?      @default(0) // UDP发送字节数
  
  // 日志信息
  logs        String?      // 日志内容
  
  // 时间戳
  createdAt   DateTime     @default(now())
  
  // 关联端点
  endpoint    Endpoint     @relation(fields: [endpointId], references: [id], onDelete: Cascade)

  @@index([endpointId, eventTime])
  @@index([instanceId, eventTime])
  @@index([status])
  @@index([eventType])
  @@index([pushType])
  @@map("EndpointSSE")
}

// 系统配置表
model SystemConfig {
  id          Int       @id @default(autoincrement())
  key         String    @unique // 配置键名
  value       String    // 配置值
  description String?   // 配置描述
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([key])
}

// 用户会话表
model UserSession {
  id          Int       @id @default(autoincrement())
  sessionId   String    @unique // 会话ID
  username    String    // 用户名
  createdAt   DateTime  @default(now())
  expiresAt   DateTime  // 过期时间
  isActive    Boolean   @default(true) // 是否活跃

  @@index([sessionId])
  @@index([username])
  @@index([expiresAt])
} 
 