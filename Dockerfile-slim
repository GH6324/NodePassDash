FROM node:20-alpine AS base
RUN corepack enable pnpm
RUN apk add --no-cache libc6-compat

# 依赖安装阶段 - 包含所有依赖（开发+生产）
FROM base AS deps
WORKDIR /app
COPY package.json pnpm-lock.yaml ./
# 安装所有依赖（包括devDependencies，因为需要prisma CLI）
RUN pnpm install --frozen-lockfile

# 构建阶段
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# 设置环境变量跳过各种检查
ENV NEXT_TELEMETRY_DISABLED=1
ENV NODE_ENV=production
ENV SKIP_ENV_VALIDATION=1
ENV CI=true

# 生成Prisma Client
RUN pnpm prisma generate

# 构建Next.js应用 - 跳过ESLint检查
RUN ESLINT_NO_DEV_ERRORS=true pnpm next build

# 运行阶段
FROM base AS runner
WORKDIR /app

ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# 只安装运行时需要的Prisma包
RUN pnpm add prisma @prisma/client --production

# 复制构建产物
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# 复制Prisma schema和其他配置文件
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma

# 复制public目录（如果存在）
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# 在运行时生成Prisma Client
RUN pnpm prisma generate

EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

CMD ["node", "server.js"]